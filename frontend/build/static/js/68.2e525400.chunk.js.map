{"version":3,"file":"static/js/68.2e525400.chunk.js","mappings":"iKAGA,MA4DA,EA5DgBA,KACd,MAAOC,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,KAC1CC,EAAUC,IAAeF,EAAAA,EAAAA,UAAS,KAGzCG,EAAAA,EAAAA,YAAU,KACkBC,WACxB,IACE,MAAMC,EAAQC,aAAaC,QAAQ,SAC7BC,QAAiBC,EAAAA,EAAMC,IAAI,+CAAgD,CAC/EC,QAAS,CAAEC,cAAe,UAAUP,OAEtCN,EAAgBS,EAASK,KAAKf,aAChC,CAAE,MAAOgB,GACPC,QAAQD,MAAM,gCAAiCA,GAC/CZ,EAAY,gCACd,GAEFc,EAAmB,GAClB,IAmBH,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kBAEqB,IAAxBrB,EAAauB,QACZD,EAAAA,EAAAA,KAAA,KAAAD,SAAG,uBAEHC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,qBAAoBC,SAC/BrB,EAAawB,KAAKC,IACjBN,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,QAAAD,SAAOI,EAAKC,YACZJ,EAAAA,EAAAA,KAAA,UAAQK,QAASA,IA3BHrB,WACxB,IACE,MAAMC,EAAQC,aAAaC,QAAQ,eAC7BE,EAAAA,EAAMiB,IAAI,0CAA0CC,IAAU,CAAC,EAAG,CACtEhB,QAAS,CAAEC,cAAe,UAAUP,OAItCN,GAAiB6B,GAAcA,EAAUC,QAAQN,GAASA,EAAKO,KAAOH,MACtEzB,EAAY,+BACd,CAAE,MAAOY,GACPC,QAAQD,MAAM,yBAA0BA,GACxCZ,EAAY,0BACd,GAciC6B,CAAkBR,EAAKO,IAAIX,SAAC,cAF5CI,EAAKO,QAQnB7B,IAAYmB,EAAAA,EAAAA,KAAA,KAAGF,UAAU,WAAUC,SAAElB,MAClC,C","sources":["Settings/Blocked.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst Blocked = () => {\n  const [blockedUsers, setBlockedUsers] = useState([]);\n  const [feedback, setFeedback] = useState('');\n\n  // Fetch blocked users from the backend\n  useEffect(() => {\n    const fetchBlockedUsers = async () => {\n      try {\n        const token = localStorage.getItem('token'); // Assuming JWT authentication\n        const response = await axios.get('http://localhost:5002/api/user/blocked-users', {\n          headers: { Authorization: `Bearer ${token}` },\n        });\n        setBlockedUsers(response.data.blockedUsers);\n      } catch (error) {\n        console.error('Error fetching blocked users:', error);\n        setFeedback('Failed to load blocked users.');\n      }\n    };\n    fetchBlockedUsers();\n  }, []);\n\n  // Handle unblocking a user\n  const handleUnblockUser = async (userId) => {\n    try {\n      const token = localStorage.getItem('token');\n      await axios.put(`http://localhost:5002/api/user/unblock/${userId}`, {}, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n\n      // Remove the user from the blocked users list after successful unblock\n      setBlockedUsers((prevUsers) => prevUsers.filter((user) => user.id !== userId));\n      setFeedback('User unblocked successfully!');\n    } catch (error) {\n      console.error('Error unblocking user:', error);\n      setFeedback('Failed to unblock user.');\n    }\n  };\n\n  return (\n    <div className=\"settings-section\">\n      <h3>Blocked Users</h3>\n\n      {blockedUsers.length === 0 ? (\n        <p>No blocked users.</p>\n      ) : (\n        <ul className=\"blocked-users-list\">\n          {blockedUsers.map((user) => (\n            <li key={user.id}>\n              <span>{user.username}</span>\n              <button onClick={() => handleUnblockUser(user.id)}>Unblock</button>\n            </li>\n          ))}\n        </ul>\n      )}\n\n      {feedback && <p className=\"feedback\">{feedback}</p>}\n    </div>\n  );\n};\n\nexport default Blocked;\n"],"names":["Blocked","blockedUsers","setBlockedUsers","useState","feedback","setFeedback","useEffect","async","token","localStorage","getItem","response","axios","get","headers","Authorization","data","error","console","fetchBlockedUsers","_jsxs","className","children","_jsx","length","map","user","username","onClick","put","userId","prevUsers","filter","id","handleUnblockUser"],"sourceRoot":""}
{"version":3,"file":"static/js/157.f26884dd.chunk.js","mappings":"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","sources":["EditProfile/Experience.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './Experience.css';\n\nconst Experience = () => {\n  const [experiences, setExperiences] = useState([\n    {\n      companyName: '',\n      location: '',\n      workMode: '',\n      startDate: '',\n      endDate: '',\n      currentlyWorking: false,\n    },\n  ]);\n\n  const handleChange = (index, event) => {\n    const { name, value, type, checked } = event.target;\n    const updatedExperiences = [...experiences];\n    updatedExperiences[index][name] = type === 'checkbox' ? checked : value;\n    setExperiences(updatedExperiences);\n  };\n\n  const handleAddExperience = () => {\n    setExperiences([\n      ...experiences,\n      {\n        companyName: '',\n        location: '',\n        workMode: '',\n        startDate: '',\n        endDate: '',\n        currentlyWorking: false,\n      },\n    ]);\n  };\n\n  const handleDeleteExperience = (index) => {\n    const updatedExperiences = experiences.filter((_, i) => i !== index);\n    setExperiences(updatedExperiences);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    console.log('Submitted Experiences:', experiences);\n    // Add backend submission logic here if needed\n  };\n\n  return (\n    <div className=\"experience-container\">\n      <h2>Professional Experience</h2>\n      <form onSubmit={handleSubmit}>\n        {experiences.map((experience, index) => (\n          <div key={index} className=\"experience-item\">\n            <div className=\"input-group\">\n              <label>Company Name</label>\n              <input\n                type=\"text\"\n                name=\"companyName\"\n                value={experience.companyName}\n                onChange={(e) => handleChange(index, e)}\n                placeholder=\"Company Name\"\n                required\n              />\n            </div>\n            <div className=\"input-group\">\n              <label>Location</label>\n              <input\n                type=\"text\"\n                name=\"location\"\n                value={experience.location}\n                onChange={(e) => handleChange(index, e)}\n                placeholder=\"Location\"\n                required\n              />\n            </div>\n            <div className=\"input-group\">\n              <label>Work Mode</label>\n              <select\n                name=\"workMode\"\n                value={experience.workMode}\n                onChange={(e) => handleChange(index, e)}\n                required\n              >\n                <option value=\"\">Select...</option>\n                <option value=\"On-site\">On-site</option>\n                <option value=\"Hybrid\">Hybrid</option>\n                <option value=\"Remote\">Remote</option>\n              </select>\n            </div>\n            <div className=\"input-group\">\n              <label>Start Date</label>\n              <input\n                type=\"date\"\n                name=\"startDate\"\n                value={experience.startDate}\n                onChange={(e) => handleChange(index, e)}\n                required\n              />\n            </div>\n            <div className=\"input-group\">\n              <label>\n                <input\n                  type=\"checkbox\"\n                  name=\"currentlyWorking\"\n                  checked={experience.currentlyWorking}\n                  onChange={(e) => handleChange(index, e)}\n                />\n                Currently Working Here\n              </label>\n            </div>\n            {!experience.currentlyWorking && (\n              <div className=\"input-group\">\n                <label>End Date</label>\n                <input\n                  type=\"date\"\n                  name=\"endDate\"\n                  value={experience.endDate}\n                  onChange={(e) => handleChange(index, e)}\n                  min={experience.startDate}\n                  required\n                />\n              </div>\n            )}\n            <button\n              type=\"button\"\n              onClick={() => handleDeleteExperience(index)}\n              className=\"delete-button\"\n            >\n              Delete\n            </button>\n          </div>\n        ))}\n        <button\n          type=\"button\"\n          onClick={handleAddExperience}\n          className=\"add-button\"\n        >\n          Add Experience\n        </button>\n        <button type=\"submit\" className=\"submit-button\">\n          Save Experiences\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default Experience;\n"],"names":["Experience","experiences","setExperiences","useState","companyName","location","workMode","startDate","endDate","currentlyWorking","handleChange","index","event","name","value","type","checked","target","updatedExperiences","_jsxs","className","children","_jsx","onSubmit","preventDefault","console","log","map","experience","onChange","e","placeholder","required","min","onClick","filter","_","i","handleDeleteExperience","handleAddExperience"],"sourceRoot":""}
{"version":3,"file":"static/js/128.85e5a271.chunk.js","mappings":"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","sources":["Messages/Messages.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Message.css';\n\nconst Messages = () => {\n  const [chats, setChats] = useState([]); // Array to hold chat data\n  const [message, setMessage] = useState(''); // Current message\n  const [selectedChat, setSelectedChat] = useState(null); // Currently selected chat\n  const [searchTerm, setSearchTerm] = useState(''); // Search term for finding users\n  const [searchResults, setSearchResults] = useState([]); // Search results for users\n\n  // Fetch real chats from backend\n  useEffect(() => {\n    const fetchChats = async () => {\n      try {\n        // Replace with your actual API endpoint\n        const response = await fetch('/api/chats');\n        const data = await response.json();\n        setChats(data);\n      } catch (error) {\n        console.error('Error fetching chats:', error);\n      }\n    };\n\n    fetchChats();\n  }, []);\n\n  // Search real users from backend\n  const searchUsers = async (term) => {\n    try {\n      // Replace with your actual API endpoint\n      const response = await fetch(`/api/users/search?term=${term}`);\n      const data = await response.json();\n      setSearchResults(data);\n    } catch (error) {\n      console.error('Error searching users:', error);\n    }\n  };\n\n  const handleSearch = (e) => {\n    const term = e.target.value;\n    setSearchTerm(term);\n    if (term) {\n      searchUsers(term);\n    } else {\n      setSearchResults([]);\n    }\n  };\n\n  const startNewChat = async (user) => {\n    try {\n      if (!chats.find(chat => chat.id === user.id)) {\n        // Replace with your actual API endpoint\n        const response = await fetch('/api/chats', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ userId: user.id }),\n        });\n        const newChat = await response.json();\n        setChats(prev => [...prev, newChat]);\n      }\n      setSelectedChat(chats.find(chat => chat.id === user.id) || user);\n      setSearchTerm('');\n      setSearchResults([]);\n    } catch (error) {\n      console.error('Error starting new chat:', error);\n    }\n  };\n\n  const handleMessageSend = async (e) => {\n    e.preventDefault();\n    if (message && selectedChat) {\n      try {\n        // Replace with your actual API endpoint\n        const response = await fetch('/api/messages', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            chatId: selectedChat.id,\n            text: message,\n          }),\n        });\n        \n        const newMessage = await response.json();\n        \n        setChats((prevChats) =>\n          prevChats.map((chat) =>\n            chat.id === selectedChat.id\n              ? { ...chat, messages: [...chat.messages, newMessage] }\n              : chat\n          )\n        );\n        setMessage('');\n      } catch (error) {\n        console.error('Error sending message:', error);\n      }\n    }\n  };\n\n  return (\n    <div className=\"messages-container\">\n      <div className=\"chats-list\">\n        <div className=\"search-container\">\n          <input\n            type=\"text\"\n            placeholder=\"Search users...\"\n            value={searchTerm}\n            onChange={handleSearch}\n            className=\"search-input\"\n          />\n          {searchResults.length > 0 && (\n            <div className=\"search-results\">\n              {searchResults.map(user => (\n                <div \n                  key={user.id} \n                  className=\"search-result-item\"\n                  onClick={() => startNewChat(user)}\n                >\n                  <img src={user.avatar} alt={user.name} className=\"user-avatar\" />\n                  <span>{user.name}</span>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n        \n        <h2>Messages</h2>\n        <div className=\"chats-scroll\">\n          {chats.map((chat) => (\n            <div \n              key={chat.id} \n              className={`chat-item ${selectedChat?.id === chat.id ? 'active' : ''}`}\n              onClick={() => setSelectedChat(chat)}\n            >\n              <img src={chat.avatar} alt={chat.name} className=\"user-avatar\" />\n              <div className=\"chat-info\">\n                <div className=\"chat-header\">\n                  <span className=\"chat-name\">{chat.name}</span>\n                  <span className=\"last-active\">{chat.lastActive}</span>\n                </div>\n                {chat.messages.length > 0 && (\n                  <p className=\"last-message\">\n                    {chat.messages[chat.messages.length - 1].text}\n                  </p>\n                )}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"chat-window\">\n        {selectedChat ? (\n          <>\n            <div className=\"chat-header\">\n              <img src={selectedChat.avatar} alt={selectedChat.name} className=\"user-avatar\" />\n              <div className=\"header-info\">\n                <h3>{selectedChat.name}</h3>\n                <span className=\"status\">{selectedChat.lastActive}</span>\n              </div>\n            </div>\n            <div className=\"chat-messages\">\n              {selectedChat.messages.map((msg, index) => (\n                <div \n                  key={index} \n                  className={`chat-message ${msg.sender === 'me' ? 'sent' : 'received'}`}\n                >\n                  <div className=\"message-content\">\n                    <p>{msg.text}</p>\n                    <span className=\"timestamp\">{msg.timestamp}</span>\n                  </div>\n                </div>\n              ))}\n            </div>\n            <form onSubmit={handleMessageSend} className=\"message-input\">\n              <input\n                type=\"text\"\n                value={message}\n                onChange={(e) => setMessage(e.target.value)}\n                placeholder=\"Type a message...\"\n              />\n              <button type=\"submit\">Send</button>\n            </form>\n          </>\n        ) : (\n          <div className=\"no-chat-selected\">\n            <h3>Welcome to Messages</h3>\n            <p>Select a chat to start messaging or search for new people to connect with!</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Messages;\n"],"names":["Messages","chats","setChats","useState","message","setMessage","selectedChat","setSelectedChat","searchTerm","setSearchTerm","searchResults","setSearchResults","useEffect","async","response","fetch","data","json","error","console","fetchChats","_jsxs","className","children","_jsx","type","placeholder","value","onChange","e","term","target","searchUsers","length","map","user","onClick","find","chat","id","method","headers","body","JSON","stringify","userId","newChat","prev","startNewChat","src","avatar","alt","name","lastActive","messages","text","_Fragment","msg","index","sender","timestamp","onSubmit","preventDefault","chatId","newMessage","prevChats"],"sourceRoot":""}
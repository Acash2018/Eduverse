{"version":3,"file":"static/js/40.b31fc134.chunk.js","mappings":"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","sources":["Posts/NewPost.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport { Editor } from '@tinymce/tinymce-react';\nimport './NewPost.css';\nimport { useNavigate } from 'react-router-dom';\n\nconst NewPost = ({ isOpen, onClose }) => {\n    const [postTitle, setPostTitle] = useState('');\n    const [postContent, setPostContent] = useState('');\n    const [selectedCategory, setSelectedCategory] = useState('');\n    const [files, setFiles] = useState([]);\n    const [isPreview, setIsPreview] = useState(false);\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [errors, setErrors] = useState([]);\n    const fileInputRef = useRef(null);\n    const navigate = useNavigate();\n\n    const categories = ['Post', 'Project', 'Research', 'Job', 'Service'];\n\n    const handleFileChange = (e) => {\n        const selectedFiles = Array.from(e.target.files);\n        setFiles(prevFiles => [...prevFiles, ...selectedFiles]);\n    };\n\n    const removeFile = (index) => {\n        setFiles(prevFiles => prevFiles.filter((_, i) => i !== index));\n    };\n\n    const validatePost = () => {\n        const newErrors = [];\n        if (!postTitle.trim()) {\n            newErrors.push(\"Title is required\");\n        }\n        if (!postContent.trim()) {\n            newErrors.push(\"Post content is required\");\n        }\n        if (!selectedCategory) {\n            newErrors.push(\"Please select a category\");\n        }\n        setErrors(newErrors);\n        return newErrors.length === 0;\n    };\n\n    const handleSubmit = async () => {\n        if (!validatePost() || isSubmitting) return;\n\n        setIsSubmitting(true);\n        try {\n            const formData = new FormData();\n            formData.append('title', postTitle.trim());\n            formData.append('content', postContent.trim());\n            formData.append('category', selectedCategory);\n            files.forEach(file => formData.append('files', file));\n\n            const token = localStorage.getItem('token');\n            if (!token) throw new Error('Authentication required');\n\n            const response = await fetch('http://localhost:5002/posts', {\n                method: 'POST',\n                headers: {\n                    'Authorization': `Bearer ${token}`\n                },\n                body: formData\n            });\n\n            if (response.ok) {\n                onClose();\n                navigate('/posts');\n            } else {\n                throw new Error('Failed to create post');\n            }\n        } catch (err) {\n            setErrors([err.message]);\n        } finally {\n            setIsSubmitting(false);\n        }\n    };\n\n    if (!isOpen) return null;\n\n    return (\n        <div className=\"modal-overlay\">\n            <div className=\"holographic-panel modal-content\">\n                <div className=\"modal-header\">\n                    <h2 className=\"neon-text\">{isPreview ? 'Preview Post' : 'Create New Post'}</h2>\n                    <button className=\"close-button cyber-button\" onClick={onClose}>&times;</button>\n                </div>\n\n                {!isPreview ? (\n                    <div className=\"modal-body\">\n                        <div className=\"input-group\">\n                            <input\n                                type=\"text\"\n                                value={postTitle}\n                                onChange={(e) => setPostTitle(e.target.value)}\n                                placeholder=\"Enter post title...\"\n                                className=\"cyber-input title-input\"\n                                maxLength={100}\n                            />\n                        </div>\n\n                        <div className=\"input-group\">\n                            <select \n                                value={selectedCategory}\n                                onChange={(e) => setSelectedCategory(e.target.value)}\n                                className=\"cyber-select category-select\"\n                            >\n                                <option value=\"\">Select Category</option>\n                                {categories.map(category => (\n                                    <option key={category} value={category}>{category}</option>\n                                ))}\n                            </select>\n                        </div>\n\n                        <Editor\n                            apiKey=\"vzy136fy9hej20t0rxfpxu19mooxienl5owvp1v3af6w09di\"\n                            value={postContent}\n                            onEditorChange={(content) => setPostContent(content)}\n                            init={{\n                                height: 300,\n                                menubar: false,\n                                plugins: ['lists', 'link'],\n                                toolbar: 'bold italic underline | bullist numlist | link',\n                                content_style: 'body { font-family: \"Orbitron\", sans-serif; font-size:14px; background: rgba(10, 10, 46, 0.8); color: #4fc3f7; }',\n                                skin: 'oxide-dark',\n                                content_css: 'dark'\n                            }}\n                        />\n\n                        <div className=\"file-upload cyber-box\">\n                            <input\n                                type=\"file\"\n                                ref={fileInputRef}\n                                onChange={handleFileChange}\n                                multiple\n                                accept=\"image/*\"\n                                style={{ display: 'none' }}\n                            />\n                            <button \n                                className=\"cyber-button upload-button\"\n                                onClick={() => fileInputRef.current.click()}\n                            >\n                                <span className=\"button-text\">Attach Files</span>\n                                <span className=\"button-glow\"></span>\n                            </button>\n                            <div className=\"file-list\">\n                                {files.map((file, index) => (\n                                    <div key={index} className=\"file-item cyber-box\">\n                                        <span>{file.name}</span>\n                                        <button className=\"cyber-button-small\" onClick={() => removeFile(index)}>Remove</button>\n                                    </div>\n                                ))}\n                            </div>\n                        </div>\n\n                        {errors.length > 0 && (\n                            <div className=\"error-messages cyber-alert\">\n                                {errors.map((error, index) => (\n                                    <p key={index} className=\"error\">{error}</p>\n                                ))}\n                            </div>\n                        )}\n\n                        <div className=\"modal-actions\">\n                            <button \n                                className=\"cyber-button preview-button\"\n                                onClick={() => setIsPreview(true)}\n                            >\n                                <span className=\"button-text\">Preview</span>\n                                <span className=\"button-glow\"></span>\n                            </button>\n                            <button \n                                className=\"cyber-button cancel-button\"\n                                onClick={onClose}\n                            >\n                                <span className=\"button-text\">Cancel</span>\n                                <span className=\"button-glow\"></span>\n                            </button>\n                            <button\n                                className=\"cyber-button submit-button\"\n                                onClick={handleSubmit}\n                                disabled={isSubmitting}\n                            >\n                                <span className=\"button-text\">{isSubmitting ? 'Posting...' : 'Post'}</span>\n                                <span className=\"button-glow\"></span>\n                            </button>\n                        </div>\n                    </div>\n                ) : (\n                    <div className=\"preview-content cyber-box\">\n                        <h3 className=\"neon-text\">{postTitle}</h3>\n                        <div className=\"category-tag cyber-tag\">{selectedCategory}</div>\n                        <div className=\"post-content holographic-text\" dangerouslySetInnerHTML={{ __html: postContent }} />\n                        <div className=\"preview-actions\">\n                            <button className=\"cyber-button\" onClick={() => setIsPreview(false)}>\n                                <span className=\"button-text\">Edit</span>\n                                <span className=\"button-glow\"></span>\n                            </button>\n                            <button className=\"cyber-button\" onClick={handleSubmit} disabled={isSubmitting}>\n                                <span className=\"button-text\">{isSubmitting ? 'Posting...' : 'Publish'}</span>\n                                <span className=\"button-glow\"></span>\n                            </button>\n                        </div>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default NewPost;\n"],"names":["_ref","isOpen","onClose","postTitle","setPostTitle","useState","postContent","setPostContent","selectedCategory","setSelectedCategory","files","setFiles","isPreview","setIsPreview","isSubmitting","setIsSubmitting","errors","setErrors","fileInputRef","useRef","navigate","useNavigate","handleSubmit","async","validatePost","newErrors","trim","push","length","formData","FormData","append","forEach","file","token","localStorage","getItem","Error","fetch","method","headers","body","ok","err","message","_jsx","className","children","_jsxs","onClick","dangerouslySetInnerHTML","__html","disabled","type","value","onChange","e","target","placeholder","maxLength","map","category","Editor","apiKey","onEditorChange","content","init","height","menubar","plugins","toolbar","content_style","skin","content_css","ref","selectedFiles","Array","from","prevFiles","multiple","accept","style","display","current","click","index","name","filter","_","i","removeFile","error"],"sourceRoot":""}
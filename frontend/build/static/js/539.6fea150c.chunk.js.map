{"version":3,"file":"static/js/539.6fea150c.chunk.js","mappings":"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","sources":["Notes/Notes.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './Notes.css';\n\nconst Notes = () => {\n  const [messages, setMessages] = useState([\n    { id: 1, text: 'Welcome to EduVerse! I\\'m Edura, your AI mentor. How can I assist you today?', sender: 'ai' },\n  ]);\n  const [inputText, setInputText] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [isListening, setIsListening] = useState(false);\n  const [suggestions, setSuggestions] = useState([]);\n  const chatContainerRef = useRef(null);\n  const avatarRef = useRef(null);\n\n  useEffect(() => {\n    // Initialize boot-up animation sequence\n    const container = chatContainerRef.current;\n    container.classList.add('system-boot');\n    \n    // Initialize neural network background\n    const particles = Array.from({ length: 30 }, () => {\n      const particle = document.createElement('div');\n      particle.className = 'neural-particle';\n      container.appendChild(particle);\n      return particle;\n    });\n\n    particles.forEach(particle => {\n      animateNeuralParticle(particle);\n    });\n\n    return () => {\n      particles.forEach(particle => particle.remove());\n    };\n  }, []);\n\n  const animateNeuralParticle = (particle) => {\n    const animation = particle.animate([\n      { \n        transform: `translate(${Math.random() * 100}vw, ${Math.random() * 100}vh)`,\n        opacity: 0.2\n      },\n      {\n        transform: `translate(${Math.random() * 100}vw, ${Math.random() * 100}vh)`,\n        opacity: 0.8\n      }\n    ], {\n      duration: 4000 + Math.random() * 3000,\n      iterations: Infinity\n    });\n    return animation;\n  };\n\n  const handleSendMessage = async () => {\n    if (!inputText.trim()) return;\n\n    const userMessage = {\n      id: messages.length + 1,\n      text: inputText,\n      sender: 'user'\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInputText('');\n    setIsTyping(true);\n\n    // Animate Edura's avatar while processing\n    if (avatarRef.current) {\n      avatarRef.current.classList.add('processing');\n    }\n\n    try {\n      setTimeout(() => {\n        const aiMessage = {\n          id: messages.length + 2,\n          text: \"I understand you're interested in learning. Let me analyze your query and provide personalized recommendations.\",\n          sender: 'ai'\n        };\n        setMessages(prev => [...prev, aiMessage]);\n        setIsTyping(false);\n        if (avatarRef.current) {\n          avatarRef.current.classList.remove('processing');\n        }\n      }, 1500);\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setIsTyping(false);\n      if (avatarRef.current) {\n        avatarRef.current.classList.remove('processing');\n      }\n    }\n  };\n\n  const handleVoiceInput = () => {\n    setIsListening(true);\n    // Voice recognition logic would go here\n    setTimeout(() => setIsListening(false), 3000);\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  return (\n    <div className=\"edura-container\" ref={chatContainerRef}>\n      <div className=\"edura-header\">\n        <div className=\"avatar-container\" ref={avatarRef}>\n          <div className=\"hologram-effect\"></div>\n          <div className=\"avatar-core\"></div>\n        </div>\n        <h1 className=\"edura-title\">Edura</h1>\n        <p className=\"edura-tagline\">Your Personalized AI Mentor</p>\n      </div>\n\n      <div className=\"chat-interface\">\n        <div className=\"chat-messages glassmorphism\">\n          {messages.map((message) => (\n            <div key={message.id} className={`message ${message.sender}`}>\n              <div className=\"message-bubble\">\n                {message.text}\n              </div>\n            </div>\n          ))}\n          {isTyping && (\n            <div className=\"message ai\">\n              <div className=\"message-bubble typing\">\n                <div className=\"typing-indicator\">\n                  <span></span><span></span><span></span>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        <div className=\"input-section glassmorphism\">\n          <textarea\n            className=\"chat-input\"\n            value={inputText}\n            onChange={(e) => setInputText(e.target.value)}\n            onKeyPress={handleKeyPress}\n            placeholder=\"Ask me anything...\"\n            rows=\"2\"\n          />\n          <button \n            className={`voice-input ${isListening ? 'listening' : ''}`}\n            onClick={handleVoiceInput}\n          >\n            <span className=\"microphone-icon\"></span>\n          </button>\n          <button \n            className=\"send-button\"\n            onClick={handleSendMessage}\n            disabled={!inputText.trim() || isTyping}\n          >\n            Send\n          </button>\n        </div>\n      </div>\n\n      <div className=\"quick-actions glassmorphism\">\n        <h3>Suggested Actions</h3>\n        <div className=\"action-buttons\">\n          <button className=\"action-btn\">Complete Profile</button>\n          <button className=\"action-btn\">Explore Courses</button>\n          <button className=\"action-btn\">Find Collaborators</button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Notes;\n"],"names":["Notes","messages","setMessages","useState","id","text","sender","inputText","setInputText","isTyping","setIsTyping","isListening","setIsListening","suggestions","setSuggestions","chatContainerRef","useRef","avatarRef","useEffect","container","current","classList","add","particles","Array","from","length","particle","document","createElement","className","appendChild","forEach","animateNeuralParticle","remove","animate","transform","Math","random","opacity","duration","iterations","Infinity","handleSendMessage","async","trim","userMessage","prev","setTimeout","aiMessage","error","console","_jsxs","ref","children","_jsx","map","message","value","onChange","e","target","onKeyPress","key","shiftKey","preventDefault","placeholder","rows","onClick","handleVoiceInput","disabled"],"sourceRoot":""}